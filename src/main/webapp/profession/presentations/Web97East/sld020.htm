
<!--  Presentation generated by Internet Assistant for Microsoft PowerPoint 97 -->

<html>
<head>
<meta http-equiv="Content-Type" content="text/html;charset=windows-1252">
<meta name="GENERATOR" content="Microsoft Internet Assistant for Microsoft PowerPoint 97">
 <title>Scales to Huge Sites</title> 
<meta name="Microsoft Border" content="none, default">
</head>

<body>

<center>
<table width="100%"> 
     <tr> <td width="15%" align="CENTER">
         <a href="sld001.htm"><img src="first.gif" border="0" alt="First" width="40" height="28"></a><br> 
         <a href="sld019.htm"><img src="prev.gif" border="0" alt="Previous" width="40" height="28"></a><br> 
         <a href="sld021.htm"><img src="next.gif" border="0" alt="Next" width="40" height="28"></a><br> 
         <a href="sld028.htm"><img src="last.gif" border="0" alt="Last" width="40" height="28"></a><br> 
<br> 
         <a href="index.htm"><img src="info.gif" border="0" alt="Index" width="40" height="28"></a><br> 
         <a href="http://aztec.chaco.com:0080/greening/index.html"><img src="home.gif" border="0" alt="Home" width="40" height="28"></a><br> 
         <a href="tsld020.htm"><img src="text.gif" border="0" alt="Text" width="40" height="28"></a><br> 
         <td width="85%" align="CENTER">         <img src="img020.gif" usemap="#Objmap" width="480" height="360" border="0">
         </td>         </td></table>
<p>Slide 20 of 28</p>
</center>

 <center><font size="4"> <strong> Notes:  </font></strong><hr></center><p> <ul>
So, great.  You like the idea of personalization, but then you think &#147;geez, this is a lot of data and a lot of processing.&#148; You might be surprised that we run MovieCritic on an old 70MHz Sparc5 with an Informix database.  100,000 registered users.  Not bad.
</ul><ul>
Even so, if you have thousands of users interacting with your site simultaneously, you probably want to understand the parallelism model we use because you&#146;ll probably need it with any personalization solution.
</ul><ul>
The way others have dealt with scaling issues has been to choose less accurate algorithms, such as partitioning or &#147;clustering&#148;.  Or worse, they choose some surrogate like demographics.  These can be done fast because they are sloppy methods.
</ul><ul>
Instead, we figured out a cool way to parallelize the algorithm that limits locking.
</ul><ul>
On the left is the UI front end.  It only writes ratings.  On the right is the mentor identifier (or sifter as we call it).  It only writes mentor weights.  The prediction vectors are constructed in the front end on the fly.  And we will even do mentor identification on the fly from a front end cache, if necessary.
</ul><ul>
But still, the front end never writes out mentor weights.
</ul><ul>
These rules allow us to run full bore on a relational database without locking rows or tables.  It&#146;s funny how these little technerd things make a big difference in performance.</ul> </p> 
<!-- <UL><H2>Scales to Huge Sites</H2></UL></P><P>  -->
</body>
</html>
